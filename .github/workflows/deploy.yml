name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: sample_rails_app_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --name=mysql-test
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.1'
        bundler-cache: true
        
    - name: Install MySQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client
        
    - name: Create .env file for test
      run: |
        echo "RAILS_ENV=test" > .env
        echo "DATABASE_HOST=127.0.0.1" >> .env
        echo "DATABASE_PORT=3306" >> .env
        echo "DATABASE_USERNAME=root" >> .env
        echo "DATABASE_PASSWORD=password" >> .env
        echo "DATABASE_NAME=sample_rails_app_test" >> .env
        
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ppassword --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 2
        done
        echo "MySQL is ready!"
        
    - name: Setup test database
      run: |
        bundle exec rake db:create
        bundle exec rake db:schema:load
        
    - name: Run tests
      run: |
        bundle exec rake test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # === rbenv環境を有効にする ===
          export PATH="$HOME/.rbenv/bin:$PATH"
          eval "$(rbenv init -)"

          # === ディレクトリ構造を準備 ===
          sudo mkdir -p /var/www/sample_rails_app/{releases,shared,current}
          sudo mkdir -p /var/www/sample_rails_app/shared/{log,tmp/{pids,sockets},config}
          sudo chown -R ubuntu:ubuntu /var/www/sample_rails_app
          
          # === .env ファイルをGitHub Secretsから直接作成 ===
          echo "Creating .env file from GitHub Secrets..."
          cat << EOF > /var/www/sample_rails_app/shared/.env
          RAILS_ENV=production
          RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}
          DATABASE_HOST=${{ secrets.PROD_DATABASE_HOST }}
          DATABASE_USERNAME=${{ secrets.PROD_DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.PROD_DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.PROD_DATABASE_NAME }}
          DATABASE_PORT=3306
          RAILS_SERVE_STATIC_FILES=true
          ALLOWED_HOSTS=${{ secrets.PROD_ALLOWED_HOSTS }}
          RAILS_MAX_THREADS=5
          WEB_CONCURRENCY=3
          EOF

          # === 新しいリリースを作成 ===
          cd /var/www/sample_rails_app
          RELEASE_DIR="releases/$(date +%Y%m%d%H%M%S)"
          git clone https://github.com/${{ github.repository }}.git "$RELEASE_DIR"
          
          cd "$RELEASE_DIR"
          
          # === 依存関係のインストール ===
          echo "Installing dependencies..."
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3 --without development test

          # === アセットのプリコンパイル ===
          echo "Precompiling assets..."
          bundle exec rake assets:precompile

          # === データベースのマイグレーション ===
          echo "Running database migrations..."
          bundle exec rake db:migrate
          
          # === NginxとUnicornの設定ファイルをコピー ===
          echo "Updating configurations..."
          sudo cp config/nginx.conf /etc/nginx/sites-available/sample_rails_app
          sudo ln -sf /etc/nginx/sites-available/sample_rails_app /etc/nginx/sites-enabled/
          sudo cp config/unicorn.rb /var/www/sample_rails_app/shared/config/

          # === 最新のリリースに切り替え ===
          echo "Activating new release..."
          ln -snf "/var/www/sample_rails_app/$RELEASE_DIR" /var/www/sample_rails_app/current
          
          # === サービスを再起動 ===
          echo "Restarting services..."
          sudo systemctl daemon-reload
          sudo nginx -t && sudo systemctl restart nginx
          sudo systemctl restart unicorn

          # === 古いリリースをクリーンアップ (最新5つを保持) ===
          echo "Cleaning up old releases..."
          cd /var/www/sample_rails_app/releases && ls -t | tail -n +6 | xargs -r rm -rf
          
          echo "Deployment completed successfully!"